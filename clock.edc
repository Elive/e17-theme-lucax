group { name: "e/modules/clock/digital";
	script {
		public do_seconds, do_24h, tick_timer, horizontal;

		public clock_cb(val) {
			new year, month, day, yearday, weekday, hour, minute;
			new Float:second;
			new v, dosec, do24h, tim;
			new buf[32], bhour[3], bminute[3], bsecond[4], bampm[3];

			date(year, month, day, yearday, weekday, hour, minute, second);

			dosec = get_int(do_seconds);
			do24h = get_int(do_24h);

			if (do24h) {
				strcat(bampm, "");
				if (hour < 10)
					snprintf(bhour, sizeof(bhour), "0%d", hour);
				else
					snprintf(bhour, sizeof(bhour), "%d", hour);

			} else {
				v = hour % 12;

				if (hour >= 12)
					strcat(bampm, "pm");
				else
					strcat(bampm, "am");

				if (v == 0)
					v = 12;

				if (v < 10)
					snprintf(bhour, sizeof(bhour), "0%d", v);
				else
					snprintf(bhour, sizeof(bhour), "%d", v);
			}

			if (minute < 10)
				snprintf(bminute, sizeof(bminute), "0%d", minute);
			else
				snprintf(bminute, sizeof(bminute), "%d", minute);

			if (dosec) {
				v = round(second);
				if (v < 10)
					snprintf(bsecond, sizeof(bsecond), ":0%d", v);
				else
					snprintf(bsecond, sizeof(bsecond), ":%d", v);
			} else
				strcat(bsecond, "");

			snprintf(buf, sizeof(buf), "%s:%s%s%s",
			         bhour, bminute, bsecond, bampm);
			set_text(PART:"time", buf);

			if (dosec) {
				v = round(second);
				tim = timer(1.0 - (second - v), "clock_cb", 1);
			} else {
				tim = timer(60.0 - (second), "clock_cb", 1);
			}
			set_int(tick_timer, tim);
		}

		public restart_clock() {
			new tim;
			tim = get_int(tick_timer);
			if (tim) {
				cancel_timer(tim);
				set_int(tick_timer, 0);
			}
			clock_cb(0);
		}

		public eval_show_date() {
			new x, y, w, h;
			get_geometry(PART:"event", x, y, w, h);
			if ((h >= 32) && ((horizontal) || (w > 90)))
				run_program(PROGRAM:"today,show");
			else
				run_program(PROGRAM:"today,hide");
		}
	}

	parts {
		part { name: "time-area";
			type: RECT;
			description { state: "default" 0.0;
				color: 0 0 0 0;
			}
			description { state: "show-date" 0.0;
				inherit: "default" 0.0;
				rel2 {
					relative: 1.0 0.0;
					to: "e.text.today";
				}
			}
		}
		part { name: "time";
			type: TEXT;
			effect: SHADOW;
			scale: 1;
			description { state: "default" 0.0;
				//				TEXT_COLOR;
				color: 255 255 255 255;
				color3: 220 220 220 0;
				rel1.to: "time-area";
				rel2.to: "time-area";
				text {
					text_class: "clock";
					font: Sans;
					size: 14;
					fit: 1 1;
					size_range: 9 72;
					text: "--:--";
				}
			}
			description { state: "horizontal" 0.0;
				inherit: "default" 0.0;
				text {
					fit: 0 1;
					min: 1 0;
				}
			}
			description { state: "vertical" 0.0;
				inherit: "default" 0.0;
				text {
					fit: 1 0;
					min: 0 1;
				}
			}
		}
		part { name: "e.text.today";
			type: TEXT;
			effect: SHADOW;
			scale: 1;
			description { state: "default" 0.0;
				//TEXT_COLOR
				color: 255 255 255 255;
				color3: 220 220 220 0;
				align: 0.5 1.0;
				min: 0 8;
				max: 9999 30;
				rel1 {
					relative: 0.0 0.9;
				}
				rel2 {
					relative: 1.0 1.0;
					offset: -1 -1;
				}
				text {
					text_class: "clock";
					font: FONT_BOLD;
					size: 9;
					fit: 0 1;
					min: 1 0;
					size_range: 8 12;
					align: 0.5 1.0;
					text: "Tod, 12/30/2011";
				}
				visible: 0;
			}
			description { state: "show-date" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}

		part { name: "event";
			type: RECT;
			mouse_events: 1;
			description { state: "default" 0.0;
				color: 0 0 0 0;
			}
		}
	}

	programs {
		program { name: "init";
			signal: "load";
			source: "";
			script {
				clock_cb(0);
				eval_show_date();
			}
		}
		program { name: "resize";
			signal: "resize";
			source: "";
			script {
				eval_show_date();
			}
		}
		program { name: "today,show";
			signal: "today,show";
			source: "";
			action: STATE_SET "show-date" 0.0;
			target: "time-area";
			target: "e.text.today";
		}
		program { name: "today,hide";
			signal: "today,hide";
			source: "";
			action: STATE_SET "default" 0.0;
			target: "time-area";
			target: "e.text.today";
		}

		program { name: "secon";
			signal: "e,state,seconds,on";
			source: "e";
			script {
				set_int(do_seconds, 1);
				restart_clock();
			}
		}
		program { name: "secoff";
			signal: "e,state,seconds,off";
			source: "e";
			script {
				set_int(do_seconds, 0);
				restart_clock();
			}
		}
		program { name: "24h";
			signal: "e,state,24h,on";
			source: "e";
			script {
				set_int(do_24h, 1);
				restart_clock();
			}
		}
		program { name: "12h";
			signal: "e,state,24h,off";
			source: "e";
			script {
				set_int(do_24h, 0);
				restart_clock();
			}
		}
		program { name: "horizontal";
			signal: "e,state,horizontal";
			source: "e";
			action: STATE_SET "horizontal" 0.0;
			target: "time";
			after: "horizontal-eval";
		}
		program { name: "horizontal-eval";
			script {
				set_int(horizontal, 1);
				eval_show_date();
			}
		}
		program { name: "vertical";
			signal: "e,state,vertical";
			source: "e";
			action: STATE_SET "vertical" 0.0;
			target: "time";
			after: "vertical-eval";
		}
		program { name: "vertical-eval";
			script {
				set_int(horizontal, 0);
				eval_show_date();
			}
		}
	}
}
